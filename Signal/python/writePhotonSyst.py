# New script to write photon systematics
# * Input is pandas dataframe

print " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HGG PHOTON SYST WRITE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "
import ROOT
import pandas as pd
import pickle
import os, sys
from optparse import OptionParser
import glob
import re

def leave():
  print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HGG PHOTON SYST WRITER (END) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "
  sys.exit(1)

def get_options():
  parser = OptionParser()
  parser.add_option("--cats", dest='cats', default='', help="RECO categories")
  parser.add_option("--ext", dest='ext', default='', help="Extension")
  parser.add_option("--scales", dest='scales', default='', help="Photon shape systematics: scales")
  parser.add_option("--scalesCorr", dest='scalesCorr', default='', help='Photon shape systematics: scalesCorr')
  parser.add_option("--scalesGlobal", dest='scalesGlobal', default='', help='Photon shape systematics: scalesGlobal')
  parser.add_option("--smears", dest='smears', default='', help='Photon shape systematics: smears')
  return parser.parse_args()
(opt,args) = get_options()

# Loop over categories and check if pkl files exist: if not then leave
for cat in opt.cats.split(","):
  if not os.path.exists("./outdir_%s/calcPhotonSyst/pkl/%s.pkl"%(opt.ext,cat)):
    print " --> [ERROR] pkl file does not exist for %s: ./outdir_%s/calcPhotonSyst/pkl/%s.pkl"%(cat,opt.ext,cat)
    leave()

print " --> Writing photon systematics to ./dat/photonCatSyst_%s.dat"%opt.ext

# Else open file to write to
f = open("./dat/photonCatSyst_%s.dat"%opt.ext,"w")
# Write preamble
f.write("# this file has been autogenerated by Signal/python/writePhotonSyst.py\n\n")
systs = {'scales':'','scalesCorr':'','scalesGlobal':'','smears':''}
outExtSyst = {'scales':'13TeVscale','scalesCorr':'scale','scalesGlobal':'13TeVscale','smears':'13TeVsmear'}
for stype in ['scales','scalesCorr','scalesGlobal','smears']:
  for s in getattr(opt,stype).split(","):
    sname = "%s_%s"%(s.split(":")[0],outExtSyst[stype])
    if len(s.split(":")) == 1: systs[stype]+= "%s,"%sname 
    else:
      sname = ":".join([sname,":".join(s.split(":")[1:])])
      systs[stype] += "%s,"%sname
for stype, slist in systs.iteritems(): 
  if slist[-1] == ",": systs[stype] = slist[:-1]
f.write("photonCatScales=%s\n"%systs['scales'])
f.write("photonCatScalesCorr=%s\n"%systs['scalesCorr'])
f.write("photonCatSmears=%s\n"%systs['smears'])
f.write("globalScales=%s\n\n"%systs['scalesGlobal'])
f.write("# photonCat                   mean_change    sigma_change    rate_change\n")

# Loop over categories
for cat_idx in range(len(opt.cats.split(","))):
  cat = opt.cats.split(",")[cat_idx]
  # Extract dataframe from pkl file
  with open("./outdir_%s/calcPhotonSyst/pkl/%s.pkl"%(opt.ext,cat),"rb") as fin: data = pickle.load(fin)
  # Loop over rows in pickle file
  for ir,r in data.iterrows():
    f.write("diphotonCat=%g\n"%cat_idx)
    f.write("proc=%s\n"%r['proc'])
    # Loop over systematics
    for stype in ['scales','smears','scalesCorr']:
      for s in systs[stype].split(","):
        f.write("%-35s %-13.8f %-13.8f %-13.8f\n"%(s,r['%s_mean'%s],r['%s_sigma'%s],r['%s_rate'%s]))
    f.write("\n")

# Close file
f.close()
    

